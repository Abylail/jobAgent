{"remainingRequest":"/home/abylai/Desktop/jobAgent/node_modules/babel-loader/lib/index.js!/home/abylai/Desktop/jobAgent/node_modules/eslint-loader/index.js??ref--13-0!/home/abylai/Desktop/jobAgent/src/store/index.js","dependencies":[{"path":"/home/abylai/Desktop/jobAgent/src/store/index.js","mtime":1624791817302},{"path":"/home/abylai/Desktop/jobAgent/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/abylai/Desktop/jobAgent/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/abylai/Desktop/jobAgent/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL2FieWxhaS9EZXNrdG9wL2pvYkFnZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0IFZ1ZSBmcm9tICJ2dWUiOwppbXBvcnQgVnVleCBmcm9tICJ2dWV4IjsKaW1wb3J0IGpvYkxpc3QgZnJvbSAiQC9jb25maWcvam9iTGlzdC5qc29uIjsKVnVlLnVzZShWdWV4KTsKZXhwb3J0IGRlZmF1bHQgbmV3IFZ1ZXguU3RvcmUoewogIHN0YXRlOiB7CiAgICBqb2JMaXN0OiBbXQogIH0sCiAgZ2V0dGVyczogewogICAgZ2V0Sm9iTGlzdDogZnVuY3Rpb24gZ2V0Sm9iTGlzdChzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuam9iTGlzdDsKICAgIH0KICB9LAogIG11dGF0aW9uczogewogICAgc2V0Sm9iczogZnVuY3Rpb24gc2V0Sm9icyhzdGF0ZSwgbGlzdCkgewogICAgICBzdGF0ZS5qb2JMaXN0ID0gbGlzdDsKICAgIH0KICB9LAogIGFjdGlvbnM6IHsKICAgIGZldGNoSm9iczogZnVuY3Rpb24gZmV0Y2hKb2JzKF9yZWYpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgY29tbWl0LCBfeWllbGQkUHJvbWlzZSwgam9iczsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZi5jb21taXQ7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoam9iTGlzdCk7CiAgICAgICAgICAgICAgICAgIH0sIDEwMDApOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIF95aWVsZCRQcm9taXNlID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIGpvYnMgPSBfeWllbGQkUHJvbWlzZS5qb2JzOwogICAgICAgICAgICAgICAgY29tbWl0KCJzZXRKb2JzIiwgam9icyk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSkoKTsKICAgIH0KICB9Cn0pOw=="},{"version":3,"sources":["/home/abylai/Desktop/jobAgent/src/store/index.js"],"names":["Vue","Vuex","jobList","use","Store","state","getters","getJobList","mutations","setJobs","list","actions","fetchJobs","commit","Promise","resolve","setTimeout","jobs"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEAF,GAAG,CAACG,GAAJ,CAAQF,IAAR;AAEA,eAAe,IAAIA,IAAI,CAACG,KAAT,CAAe;AAC1BC,EAAAA,KAAK,EAAE;AACHH,IAAAA,OAAO,EAAE;AADN,GADmB;AAI1BI,EAAAA,OAAO,EAAE;AACLC,IAAAA,UAAU,EAAE,oBAAAF,KAAK;AAAA,aAAIA,KAAK,CAACH,OAAV;AAAA;AADZ,GAJiB;AAO1BM,EAAAA,SAAS,EAAE;AACPC,IAAAA,OADO,mBACCJ,KADD,EACQK,IADR,EACc;AACjBL,MAAAA,KAAK,CAACH,OAAN,GAAgBQ,IAAhB;AACH;AAHM,GAPe;AAY1BC,EAAAA,OAAO,EAAE;AACCC,IAAAA,SADD,2BACuB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAVC,gBAAAA,MAAU,QAAVA,MAAU;AAAA;AAAA,uBACD,IAAIC,OAAJ,CAAY,UAAAC,OAAO;AAAA,yBAAIC,UAAU,CAAC;AAAA,2BAAMD,OAAO,CAACb,OAAD,CAAb;AAAA,mBAAD,EAAyB,IAAzB,CAAd;AAAA,iBAAnB,CADC;;AAAA;AAAA;AAChBe,gBAAAA,IADgB,kBAChBA,IADgB;AAExBJ,gBAAAA,MAAM,CAAC,SAAD,EAAYI,IAAZ,CAAN;;AAFwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG3B;AAJI;AAZiB,CAAf,CAAf","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport jobList from \"@/config/jobList.json\";\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n    state: {\n        jobList: []\n    },\n    getters: {\n        getJobList: state => state.jobList\n    },\n    mutations: {\n        setJobs(state, list) {\n            state.jobList = list;\n        }\n    },\n    actions: {\n        async fetchJobs({ commit }) {\n            const { jobs } = await new Promise(resolve => setTimeout(() => resolve(jobList), 1000))\n            commit(\"setJobs\", jobs);\n        }\n    }\n})"]}]}