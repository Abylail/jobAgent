{"remainingRequest":"/Users/abylay/Desktop/jobAgent/node_modules/babel-loader/lib/index.js!/Users/abylay/Desktop/jobAgent/node_modules/eslint-loader/index.js??ref--13-0!/Users/abylay/Desktop/jobAgent/src/store/index.js","dependencies":[{"path":"/Users/abylay/Desktop/jobAgent/src/store/index.js","mtime":1624810052650},{"path":"/Users/abylay/Desktop/jobAgent/node_modules/cache-loader/dist/cjs.js","mtime":1624728007769},{"path":"/Users/abylay/Desktop/jobAgent/node_modules/babel-loader/lib/index.js","mtime":1624728007676},{"path":"/Users/abylay/Desktop/jobAgent/node_modules/eslint-loader/index.js","mtime":1624728008860}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9hYnlsYXkvRGVza3RvcC9qb2JBZ2VudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCBWdWUgZnJvbSAidnVlIjsKaW1wb3J0IFZ1ZXggZnJvbSAidnVleCI7CmltcG9ydCBqb2JMaXN0IGZyb20gIkAvY29uZmlnL2pvYkxpc3QuanNvbiI7ClZ1ZS51c2UoVnVleCk7CmV4cG9ydCBkZWZhdWx0IG5ldyBWdWV4LlN0b3JlKHsKICBzdGF0ZTogewogICAgam9iTGlzdDogW10KICB9LAogIGdldHRlcnM6IHsKICAgIGdldEpvYkxpc3Q6IGZ1bmN0aW9uIGdldEpvYkxpc3Qoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmpvYkxpc3Q7CiAgICB9CiAgfSwKICBtdXRhdGlvbnM6IHsKICAgIHNldEpvYnM6IGZ1bmN0aW9uIHNldEpvYnMoc3RhdGUsIGxpc3QpIHsKICAgICAgc3RhdGUuam9iTGlzdCA9IGxpc3Q7CiAgICB9CiAgfSwKICBhY3Rpb25zOiB7CiAgICBmZXRjaEpvYnM6IGZ1bmN0aW9uIGZldGNoSm9icyhfcmVmKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgX3lpZWxkJFByb21pc2UsIGpvYnM7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYuY29tbWl0OwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGpvYkxpc3QpOwogICAgICAgICAgICAgICAgICB9LCAxMDAwKTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBfeWllbGQkUHJvbWlzZSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICBqb2JzID0gX3lpZWxkJFByb21pc2Uuam9iczsKICAgICAgICAgICAgICAgIGNvbW1pdCgic2V0Sm9icyIsIGpvYnMpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9CiAgfQp9KTs="},{"version":3,"sources":["/Users/abylay/Desktop/jobAgent/src/store/index.js"],"names":["Vue","Vuex","jobList","use","Store","state","getters","getJobList","mutations","setJobs","list","actions","fetchJobs","commit","Promise","resolve","setTimeout","jobs"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEAF,GAAG,CAACG,GAAJ,CAAQF,IAAR;AAEA,eAAe,IAAIA,IAAI,CAACG,KAAT,CAAe;AAC1BC,EAAAA,KAAK,EAAE;AACHH,IAAAA,OAAO,EAAE;AADN,GADmB;AAI1BI,EAAAA,OAAO,EAAE;AACLC,IAAAA,UAAU,EAAE,oBAAAF,KAAK;AAAA,aAAIA,KAAK,CAACH,OAAV;AAAA;AADZ,GAJiB;AAO1BM,EAAAA,SAAS,EAAE;AACPC,IAAAA,OADO,mBACCJ,KADD,EACQK,IADR,EACc;AACjBL,MAAAA,KAAK,CAACH,OAAN,GAAgBQ,IAAhB;AACH;AAHM,GAPe;AAY1BC,EAAAA,OAAO,EAAE;AACCC,IAAAA,SADD,2BACuB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAVC,gBAAAA,MAAU,QAAVA,MAAU;AAAA;AAAA,uBACD,IAAIC,OAAJ,CAAY,UAAAC,OAAO;AAAA,yBAAIC,UAAU,CAAC;AAAA,2BAAMD,OAAO,CAACb,OAAD,CAAb;AAAA,mBAAD,EAAyB,IAAzB,CAAd;AAAA,iBAAnB,CADC;;AAAA;AAAA;AAChBe,gBAAAA,IADgB,kBAChBA,IADgB;AAExBJ,gBAAAA,MAAM,CAAC,SAAD,EAAYI,IAAZ,CAAN;;AAFwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG3B;AAJI;AAZiB,CAAf,CAAf","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport jobList from \"@/config/jobList.json\";\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n    state: {\n        jobList: []\n    },\n    getters: {\n        getJobList: state => state.jobList\n    },\n    mutations: {\n        setJobs(state, list) {\n            state.jobList = list;\n        }\n    },\n    actions: {\n        async fetchJobs({ commit }) {\n            const { jobs } = await new Promise(resolve => setTimeout(() => resolve(jobList), 1000))\n            commit(\"setJobs\", jobs);\n        }\n    }\n})"]}]}